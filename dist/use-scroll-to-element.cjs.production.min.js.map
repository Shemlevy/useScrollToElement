{"version":3,"file":"use-scroll-to-element.cjs.production.min.js","sources":["../src/index.tsx"],"sourcesContent":["import { nanoid } from 'nanoid'\nimport { useLayoutEffect } from 'react';\n\n/**\n * ScrollToElement can apply just on \"real\" element that is on the DOM - will not work on virtual lists etc.\n * @scroll - promise function once solved will scroll to the element by the id was generated from useScroll.\n * @useScroll - should be placed in the Component element, returning the id to attach to the desired scrolled element.\n *\n * @return   {Object}\n *           object with scroll and useScroll\n *\n * @scroll - promise function once solved will scroll to the element by the id was generated from useScroll.\n * @useScroll - should be placed in the Component element, returning the id to attach to the desired scrolled element.\n *\n * @example\n *    export const {\n *      scroll: scrollToImg,\n *      useScroll: useScrollToImg,\n *    } = new ScrollToElement();\n *\n *    **./components/Main.js**\n *\n *    export const Main = () => {\n *      const id = useScrollToImg()\n *\n *      return\n *          (<>\n *            <div>Hello World</div>\n *            {...lotsOfElements}\n *            <img id={id} src='./image.jpg' />\n *          </>)\n *    }\n *\n *\n *    **./modals/Main.js**\n *\n *    export const Main = () =>\n *      (<button onClick={scrollToImg}>Show Image</button>)\n *\n *\n *\n */\n\nclass Deferred<T> {\n  resolve!: (result: T) => void;\n\n  reject!: (error: any) => void;\n\n  promise = new Promise<T>((resolve, reject) => {\n    this.resolve = resolve;\n    this.reject = reject;\n  });\n}\n\nconst scrollToElementId = (id: string) => {\n  const el = document.getElementById(id);\n  el?.scrollIntoView({\n    behavior: 'smooth',\n    block: 'start',\n    inline: 'nearest',\n  });\n};\n\nexport class ScrollToElement {\n  id = nanoid();\n\n  df = new Deferred();\n\n  scroll = () => {\n    this.df.promise.then(() => {\n      setTimeout(() => scrollToElementId(this.id), 0);\n    });\n  };\n\n  useScroll = () => {\n    useLayoutEffect(() => {\n      this.df.resolve('resolve');\n      return () => {\n        this.df = new Deferred();\n      };\n    }, []);\n    return this.id;\n  };\n}\n\n"],"names":["Deferred","Promise","resolve","reject","_this","nanoid","_this2","df","promise","then","setTimeout","el","document","getElementById","id","scrollIntoView","behavior","block","inline","useLayoutEffect"],"mappings":"+GA2CMA,EAAN,mCAKY,IAAIC,SAAW,SAACC,EAASC,GACjCC,EAAKF,QAAUA,EACfE,EAAKD,OAASA,8BAalB,8BACOE,mBAEA,IAAIL,cAEA,WACPM,EAAKC,GAAGC,QAAQC,MAAK,WACnBC,YAAW,WAhBS,IAClBC,SAAAA,EAAKC,SAASC,eAemBP,EAAKQ,MAd5CH,EAAII,eAAe,CACjBC,SAAU,SACVC,MAAO,QACPC,OAAQ,cAWuC,sBAIrC,kBACVC,mBAAgB,kBACdb,EAAKC,GAAGL,QAAQ,WACT,WACLI,EAAKC,GAAK,IAAIP,KAEf,IACIM,EAAKQ"}